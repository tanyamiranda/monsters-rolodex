{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","Monsters.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","profession","email","phone","CardList","monsters","map","key","SearchBox","type","placeholder","placeHolder","onChange","changeHandler","Monsters","changeMonsters","e","setState","searchField","target","value","state","this","filteredMonsters","filter","toLowerCase","includes","changeMonsters2","fetch","then","response","json","users","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iYAIaA,G,cAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,gCACI,yBAAKC,IAAI,UAAUC,IAAK,wBAA0BH,EAAMI,QAAQC,GAAK,cACrE,6BAAK,gCAASL,EAAMI,QAAQE,OAC5B,6BAAMN,EAAMI,QAAQG,YACpB,6BAAMP,EAAMI,QAAQI,OACpB,6BAAMR,EAAMI,QAAQK,WCLnBC,G,OAAW,SAAAV,GAAK,OACzB,yBAAKC,UAAU,aACVD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OACvB,kBAAC,EAAD,CAAMS,IAAKT,EAAQC,GAAID,QAASA,UCN/BU,G,OAAY,SAAAd,GAAK,OAC1B,2BACIe,KAAK,SACLC,YAAahB,EAAMiB,YACnBC,SAAUlB,EAAMmB,kBCoETC,E,YAnEb,aAAe,IAAD,8BAEZ,+CAeFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdrC,EAAKC,MAAQ,CACXhB,SAAU,GACVa,YAAa,IANH,E,6EAyBGF,GACfM,KAAKL,SAAS,CAACC,YAAaF,EAAEG,OAAOC,U,+BAI7B,IAAD,SAEyBE,KAAKD,MAA9BhB,EAFA,EAEAA,SAAUa,EAFV,EAEUA,YAOXK,EAAmBlB,EAASmB,QAChC,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASR,EAAYO,kBAG7D,OAEI,yBAAK9B,UAAU,YACb,yBAAKA,UAAU,kBAAf,oBACA,kBAAC,EAAD,CAAWgB,YAAY,kBAAkBE,cAEvC,SAAAG,GAAC,OAAI,EAAKW,gBAAgBX,MAE5B,6BAAK,6BACL,kBAAC,EAAD,CAAUX,SAAUkB,O,0CAOP,IAAD,OAElBK,MAAM,yBACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKf,SAAS,CAACZ,SAAS2B,W,GAjEpBC,IAAMC,WCMTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SDuHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8e1ef0b4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <center>\r\n            <img alt='monster' src={'https://robohash.org/' + props.monster.id + '?set=set2'} />    \r\n            <div><strong>{props.monster.name}</strong></div>\r\n            <div>{props.monster.profession}</div>\r\n            <div>{props.monster.email}</div>\r\n            <div>{props.monster.phone}</div>\r\n        </center>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component'\r\n\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = props => (\r\n    <div className=\"card-list\">\r\n        {props.monsters.map(monster => \r\n            <Card key={monster.id} monster={monster} />\r\n        )}    \r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = props => (\r\n    <input\r\n        type=\"search\"\r\n        placeholder={props.placeHolder}\r\n        onChange={props.changeHandler}\r\n    />\r\n)\r\n\r\n/*\r\n//Below produces the same output, it's just another way \r\n//to write the component with the parameters\r\n//explicitly defined instead of accessed via the props.\r\n//Not sure which one I like yet... \r\nexport const SearchBox = ({placeHolder, changeHandler}) => (\r\n\r\n    <input \r\n        type=\"search\" \r\n        placeholder={placeHolder} \r\n        onChange={changeHandler}\r\n    />\r\n\r\n)\r\n*/","import React from 'react';\r\nimport './Monsters.css';\r\nimport { CardList } from './components/card-list/card-list.component';\r\nimport { SearchBox } from './components/search-box/search-box.component';\r\n\r\n\r\nclass Monsters extends React.Component {\r\n\r\n  constructor() {\r\n    \r\n    super();\r\n    \r\n    this.state = {\r\n      monsters: [],\r\n      searchField: \"\"\r\n    };\r\n  }\r\n  \r\n  // When writing functions, there are two ways to write it so it \r\n  // takes in the scope of the calling component. \r\n  //\r\n  // First, explicitly define the function so that any calls \r\n  // to the function takes in the component as the caller as its\r\n  // scope. By stating the arrow function \"e =>\", you are asking\r\n  // the compiler to bind the scope to the caller.\r\n  changeMonsters = e => {\r\n    this.setState({searchField: e.target.value})\r\n  }\r\n  // Second, define the function normally, but when called use\r\n  // the arrow function to pass in the scope. So when calling\r\n  // the function, you would write \"e => this.changeMonsters2(e)\"\r\n  // This may lead to compilation, undefined, or out-of-scope errors\r\n  // if the function is called without using the arrow function.\r\n  changeMonsters2 (e) {\r\n    this.setState({searchField: e.target.value})\r\n  }\r\n\r\n  //Whenever the state is updated, render() method is called\r\n  render() {\r\n\r\n    const {monsters, searchField} = this.state;\r\n    //The line above is equivalent to the two below.\r\n    //Just another way to write the same code. \r\n    //const monsters = this.state.monsters;\r\n    //const searchField = this.state.searchField;\r\n\r\n    //This variable is passed into the CardList monsters property\r\n    const filteredMonsters = monsters.filter( \r\n      monster => monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n\r\n    return (\r\n              \r\n        <div className=\"Monsters\">\r\n          <div className=\"monster-header\">Monsters Rolodex</div>\r\n          <SearchBox placeHolder=\"search monsters\" changeHandler={\r\n            //this.changeMonsters --this works too, but can only call one or the other\r\n            e => this.changeMonsters2(e)\r\n          } />\r\n          <br/><br/>\r\n          <CardList monsters={filteredMonsters} />\r\n        </div>\r\n     \r\n    )\r\n  }\r\n\r\n  // Life Cycle Method called whenever the page is rendered.\r\n  componentDidMount() {\r\n    //fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    fetch(\"monsters-rolodex.json\")   // used my own file to make customizations to data\r\n    .then(response => response.json())\r\n    .then(users => this.setState({monsters:users}));\r\n  }\r\n}\r\n\r\nexport default Monsters;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n//import App from './App';\r\nimport Monsters from './Monsters';\r\n//import AppClass from './AppClass';\r\n\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Monsters />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}